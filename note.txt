C++ 的 traits 技术，是一种约定俗称的技术方案. 
traits 技术的关键在于，使用另外的模板类 type_traits 来保存不同数据类型的 type，这样就可以兼容自定义数据类型和内置数据类型

1. integral_constant 
这个类是所有traits类的基类，分别提供了以下功能：
value_type 表示值的类型;
value表示值;
type 表示自己, 因此可以用::type::value来获取值;
true_type和false_type两个特化类用来表示bool值类型的traits，很多traits类都需要继承它们.

2. https://blog.csdn.net/weixin_46412362/article/details/117755100 iterator_traits

3. https://en.cppreference.com/w/cpp/types/enable_if
enable_if的出现使得SFINAE使用上更加方便，进一步扩展了上面has_xxx is_xxx的作用。

而enable_if实现上也是使用了SFINAE。
4. https://en.cppreference.com/w/cpp/language/sfinae

SFINAE是C++模板编译的一个原则，全名叫做Substitution Failure Is Not An Error

C++编译过程中，如果模板实例化后的某个模板函数（模板类）对该调用无效，那么将继续寻找其他重载决议，而不是引发一个编译错误。

5. https://leezw.net/assets/pdf/STL%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90.pdf

6. rb-tree is a container but is private


vector:
    1.begin, 返回数据区左边界的指针
    2.end, 返回数据区右虚边界指针
    3.rbegin, 返回数据区右虚边界对应的反向迭代器
    4.rend, 返回数据区左边界对应的反向迭代器
    5.size, 返回end()-begin(), 即数据区元素个数
    6.max_size, 返回size_type类型的最大数, 也就是size_t能够表示的最大值
    7.capacity, 返回_M_end_of_storage - begin(); 即缓冲区能够容纳的元素个数
    8.swap, 交换_M_start， _M_finish， _M_end_of_storage这三个指针即可
    9.insert, 同push_back, 不同点在于insert需要移动插入位置之后的所有元素
    10.pop_back, 销毁末尾元素
    11.erase, 销毁指定元素或者区间，然后将被销毁元素之后的所有元素向头部复制
    12.resize，分两种情况
        新size比现在大，插入new_size - old_size个0值
        新size比现在小，对尾部old_size - new_size个元素执行erase，需要注意的是，resize并不会释放缓冲区上可用内存

    13.operator=, 假设将b赋值给a, 分三种情况
        如果b.size > a.capacity, a先执行_M_allocate_and_copy申请并初始化新缓冲区，再执行_M_deallocate释放旧缓冲区
        如果a.size > b.size,  直接复制b到a, 并销毁a中多余的对象
        如果a.size < b.size < a.capacity, 先复制b的前a.size个元素到a, 然后执行uninitialized_copy复制b的后b.size-a.size个元素到a中

    14.reserve,  申请新内存，反向复制所有元素并释放旧内存
    15.assign(n, val) 实现上也分三种情况
        n > a.capacity,  构造新vector(假设为tmp), 并执行a.swap(tmp)
        a.size < n < a.capacity, 同operator=
        n < a.size, 同operator=




